using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;

namespace Trasys.Dev.Tools.Data.Entity
{
    /// <summary>
    /// Class to manage classical entity action like Insert or Update a data base table with all property values of a specified object.
    /// </summary>
    public class SqlAction : ActionBase<SqlConnection, SqlCommand, SqlParameterCollection, SqlTransaction, SqlException>
    {
        /// <summary>
        /// Initializes a new instance of SqlAction for the specified Command and Entity.
        /// </summary>
        /// <param name="command">Command object to execute.</param>
        /// <param name="entity">Entity to update.</param>
        /// <param name="actionType"> Specify the type of the action object </param>
        internal SqlAction(SqlDatabaseCommand command, DbTable entity,Type actionType) : base(command, entity,actionType)
        {
            foreach (ActionColumn column in this.GetActionColumns())
            {
                column.ParameterName = String.Format("@p{0}", column.Index);
            }
        }

        /// <summary>
        /// Initializes a new instance of SqlAction for the specified Command and Entity.
        /// </summary>
        /// <param name="command">Command object to execute.</param>
        /// <param name="entity">Entity to update.</param>
        internal SqlAction(SqlDatabaseCommand command, DbTable entity) : this(command, entity,entity.GetType())
        {
        }

        /// <summary>
        /// Gets the generated INSERT/UPDATE command.
        /// </summary>
        /// <param name="forceCompleteUpdate">True to update all columns. False to update only modified values.</param>
        /// <returns>The SQL update command text.</returns>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
        public override string GetUpdateCommandText(bool forceCompleteUpdate)
        {
            StringBuilder command = new StringBuilder();
            ActionColumn[] columns = this.GetActionColumns();

            if (columns.Length > 0)
            {
                string tableName = columns[0].TableName;
                string primaryWhere = String.Join(" AND ", columns.Where(c => c.IsPrimaryKey).Select(c => String.Format("[{0}] = {1}", c.FieldName, c.ParameterName)));

                command.AppendFormat("IF (EXISTS(SELECT * FROM [{0}] WHERE {1})) \n", tableName, primaryWhere);
                command.AppendLine(" BEGIN ");
                command.AppendFormat("  UPDATE [{0}] SET\n ", tableName);
                if (forceCompleteUpdate)
                {
                    command.AppendFormat(String.Join(", ", columns.Where(c => !c.IsAutoGenerated).Select(c => String.Format("[{0}] = {1}", c.FieldName, c.ParameterName))));
                }
                else
                {
                    command.AppendFormat(String.Join(", ", columns.Where(c => !c.IsAutoGenerated && c.IsValueChanged).Select(c => String.Format("[{0}] = {1}", c.FieldName, c.ParameterName))));
                }
                command.AppendFormat("\n  WHERE {0} \n ", primaryWhere);
                command.AppendLine(" SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY]; ");
                command.AppendLine(" END ");

                command.AppendFormat("ELSE \n");

                command.AppendLine(" BEGIN ");
                command.AppendFormat("  INSERT INTO [{0}] (", tableName);
                if (forceCompleteUpdate)
                {
                    command.AppendFormat(String.Join(", ", columns.Where(c => !c.IsAutoGenerated).Select(c => String.Format("[{0}]", c.FieldName))));
                }
                else
                {
                    command.AppendFormat(String.Join(", ", columns.Where(c => !c.IsAutoGenerated && c.IsValueChanged).Select(c => String.Format("[{0}]", c.FieldName))));
                }
                command.AppendFormat(")\nVALUES (");
                if (forceCompleteUpdate)
                {
                    command.AppendFormat(String.Join(", ", columns.Where(c => !c.IsAutoGenerated).Select(c => c.ParameterName)));
                }
                else
                {
                    command.AppendFormat(String.Join(", ", columns.Where(c => !c.IsAutoGenerated && c.IsValueChanged).Select(c => c.ParameterName)));
                }
                command.AppendFormat(");\n");
                command.AppendLine(" SELECT SCOPE_IDENTITY() AS [SCOPE_IDENTITY]; ");
                command.AppendLine(" END ");
            }

            return command.ToString();
        }

        /// <summary>
        /// Insert or update the associated table, by attribute [Table], with all entity property values.
        /// </summary>
        /// <param name="forceCompleteUpdate">True to update all columns. False to update only modified values.</param>
        /// <returns>Identity number if exists, or count of lines modified if no IdentityAttribute has been defined on a property of the entity </returns>
        public override long Update(bool forceCompleteUpdate)
        {
            long toReturn = 0;

            // Keep CommandText, etc.
            KeepCommandProperties();

            // Sets the INSERT/UPDATE command and execute it
            this.Command.CommandType = System.Data.CommandType.Text;
            this.Command.CommandText = new StringBuilder(this.GetUpdateCommandText(forceCompleteUpdate));

            // Sets all parameters
            this.Command.Parameters.Clear();
            foreach (ActionColumn column in this.GetActionColumns())
            {
                this.Command.Parameters.AddWithValue(column.ParameterName, column.Value == null ? DBNull.Value : column.Value);
            }

            // If an action column IsIdentity exists, get the result of scope_identity that has been included to the query with the GetUpdateCommandText method
            if (this.GetActionColumns().Any(c => c.IsIdentity))
            {
                toReturn = Convert.ToInt64(this.Command.ExecuteScalar<decimal>());
            }
            else
            {
                toReturn = this.Command.ExecuteNonQuery();
            }

            // Restore CommandText, etc.
            RestoreCommandProperties();

            return toReturn;
        }
    }
}
