@using Trasys.PhotoTrack.BackEnd.Models

@{
    if (ViewBag.SiteId > 0)
    {
        ViewBag.Title = "Edit a site";
    }
    else
    {
        ViewBag.Title = "Add a site";
    }

}
@model Trasys.PhotoTrack.BackEnd.Models.SiteModels


@if (ViewBag.MessageSuccess != string.Empty)
{
    @Html.Raw("<div class='row'><div class='col-lg-12'><div class='box dark'><header style='text-align: center;'><h5>" + ViewBag.MessageSuccess + "</h5></header></div></div></div>");
}


<div class="row">
    <div class="col-lg-6">
        <div class="box dark">
            <header>
                <div class="icons">
                    <i class="fa fa-edit"></i>
                </div>
                <h5>Site informations</h5>
            </header>

            <div id="div-1" class="body collapse in">
                @using (Html.BeginForm("Edit", "Site", FormMethod.Post, new { @class = "form-horizontal" }))
                {
                    <div class="form-group">
                        <label for="text1" class="control-label col-lg-4">@Html.LabelFor(p => p.Number)</label>
                        <div class="col-lg-8">
                            @Html.EditorFor(p => p.Number, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="text1" class="control-label col-lg-4">@Html.LabelFor(p => p.Description)</label>
                        <div class="col-lg-8">
                            @Html.EditorFor(p => p.Description, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="text1" class="control-label col-lg-4">@Html.LabelFor(p => p.EnterpriseName)</label>
                        <div class="col-lg-8">
                            @{
                    List<SelectListItem> listItemsEnterprise = ViewBag.ListEnterpriseSelectItems;
                            }
                            @Html.DropDownListFor(p => p.EnterpriseStringID, @listItemsEnterprise, "-- Select Enterprise --", new { @class = "form-control chzn-select" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="text1" class="control-label col-lg-4">@Html.LabelFor(p => p.StatusDescription)</label>
                        @{
                    List<SelectListItem> listItems = new List<SelectListItem>();
                    listItems.Add(new SelectListItem
                         {
                             Text = "New",
                             Value = "NEW"
                         });
                    listItems.Add(new SelectListItem
                         {
                             Text = "In Progress",
                             Value = "PRG",
                             Selected = true
                         });
                    listItems.Add(new SelectListItem
                         {
                             Text = "Closed",
                             Value = "CLSD"
                         });
                        }
                        <div class="col-lg-8">
                            @Html.DropDownListFor(model => model.Status, listItems, "-- Select Status --", new { @class = "form-control chzn-select" })
                        </div>

                    </div>
                    <div class="form-group">
                        <label for="text1" class="control-label col-lg-4">@Html.LabelFor(p => p.Address)</label>
                        <div class="col-lg-8">
                            @Html.EditorFor(p => p.Address, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="text1" class="control-label col-lg-4">@Html.LabelFor(p => p.Longitude)</label>
                        <div class="col-lg-8">
                            @Html.EditorFor(p => p.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="text1" class="control-label col-lg-4">@Html.LabelFor(p => p.Latitude)</label>
                        <div class="col-lg-8">
                            @Html.EditorFor(p => p.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="text1" class="control-label col-lg-4">@Html.LabelFor(p => p.PlannedDate)</label>
                        <div class="col-lg-8">
                            @Html.EditorFor(p => p.PlannedDate, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                    @Html.EditorFor(p => p.SiteID);
                    @Html.EditorFor(p => p.Status);
                    @Html.EditorFor(p => p.EnterpriseID);
                    <div class="form-actions no-margin-bottom">
                        <input type="submit" value="Validate" class="btn btn-primary">
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="col-lg-6">
        <!-- .box -->
        <div class="box">
            <header>
                <h5>Map with markers</h5>
            </header>
            <div class="body">
                <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDrL9AEMFbrQqBhsnmBg5SYJp3N85fuXEk&amp;sensor=true&amp;region=BE&amp;language=en">
                </script>
                <script type="text/javascript">


                    var myLatlng = new google.maps.LatLng(@ViewBag.Longitude, @ViewBag.Latitude);

                    // Declarations
                    var map;
                    var markers = [];
                    var geocoder;
                    var directionsDisplay = new google.maps.DirectionsRenderer();
                    var directionsService = new google.maps.DirectionsService();

                    // Functions

                    // Initializes the google maps api
                    function initialize() {

                        var mapOptions = {
                            center: new google.maps.LatLng(50.469292, 4.433198), //gosselies centre, use a standard Brussels ?
                            zoom: 15,
                            mapTypeId: google.maps.MapTypeId.ROADMAP
                        };

                        map = new google.maps.Map(document.getElementById("map_canvas"),
                            mapOptions);

                        directionsDisplay.setMap(map);
                        directionsDisplay.setPanel(document.getElementById('directions_panel'));

                    } //function initialize

                    // Sets a simple marker with location information on google maps
                    function setMarkerLatLng(lat, lng, header, other) {

                        try {
                            geocoder = new google.maps.Geocoder();

                            if (geocoder) {
                                var latlng = new google.maps.LatLng(lat, lng);
                                geocoder.geocode({ 'latLng': latlng }, function (results, status) {
                                    if (status == google.maps.GeocoderStatus.OK) {
                                        if (results[1]) {
                                            map.setZoom(11);
                                            marker = new google.maps.Marker({
                                                position: latlng,
                                                map: map
                                            });

                                            var infowindow = new google.maps.InfoWindow(
                                                {
                                                    content: '<h2>' + header + '</h2>' + other + '<h3>' + results[1].formatted_address + '</h3>',
                                                    size: new google.maps.Size(150, 50)
                                                });

                                            google.maps.event.addListener(marker, 'click', function () {
                                                infowindow.open(map, marker);
                                            });

                                            markers.push(marker);
                                            //infowindow.open(map, marker);
                                        } else {
                                            alert('No results found');
                                            return "No results found";
                                        }
                                    } else {
                                        alert('Geocoder failed due to: ' + status);
                                        return "Geocoder failed due to: " + status;
                                    }
                                });

                                return "OK";
                            }
                        }
                        catch (e) {
                            return e.status;
                        }

                    } //function setMarkerLatLon

                    // Sets a simple marker with location information on google maps
                    function setMarker(address, header, other) {

                        geocoder = new google.maps.Geocoder();

                        if (geocoder) {
                            geocoder.geocode({ 'address': address }, function (results, status) {

                                if (status == google.maps.GeocoderStatus.OK) {

                                    if (status != google.maps.GeocoderStatus.ZERO_RESULTS) {

                                        map.setCenter(results[0].geometry.location);

                                        var infowindow = new google.maps.InfoWindow(
                                            {
                                                content: '<h2>' + header + '</h2>' + other + '<h3>' + address + '</h3>',
                                                size: new google.maps.Size(150, 50)
                                            });

                                        var marker = new google.maps.Marker({
                                            position: results[0].geometry.location,
                                            map: map,
                                            title: address
                                        });

                                        google.maps.event.addListener(marker, 'click', function () {
                                            infowindow.open(map, marker);
                                        });

                                        markers.push(marker);

                                        return "OK";

                                    } else {
                                        return "No results found";
                                    }
                                } else {
                                    return "Geocode was not successful for the following reason: " + status;
                                }
                            });
                        }

                        // Maximize the map_canvas
                        var mapCanvas = document.getElementById("map_canvas");
                        mapCanvas.style.width = "100%";

                        return "OK";
                    } //function setMarker

                    // Sets the map on all markers in the array.
                    function setAllMap(map) {
                        for (var i = 0; i < markers.length; i++) {
                            markers[i].setMap(map);
                        }
                    }

                    // Removes the markers from the map, but keeps them in the array.
                    function clearMarkers() {
                        setAllMap(null);
                    }

                    // Deletes all markers in the array by removing references to them.
                    function deleteMarkers() {
                        clearMarkers();
                        markers = [];
                    }

                    // Calculates the optimal route
                    function calcRoute(addresses, start, end, optimize) {

                        var waypts = [];

                        if (addresses.length > 0) {
                            var addressArray = addresses.split("|");

                            for (var i = 0; i < addressArray.length; i++) {

                                waypts.push({
                                    location: addressArray[i],
                                    stopover: true
                                });

                            }
                        }
                        var optimizeValue = false;
                        if (optimize == 1)
                            optimizeValue = true;

                        var request = {
                            origin: start,
                            destination: end,
                            waypoints: waypts,
                            optimizeWaypoints: optimizeValue,
                            travelMode: google.maps.DirectionsTravelMode.DRIVING
                        };

                        // get direction
                        directionsService.route(request, function (response, status) {
                            if (status == google.maps.DirectionsStatus.OK) {
                                directionsDisplay.setDirections(response);
                            }//if
                        });
                        return "OK";
                    }//function calcRoute

                    function GetRoute() {
                        return document.getElementById('directions_panel').innerHTML;
                    }

                    // Events
                    google.maps.event.addDomListener(window, 'load', initialize);

                </script>

                <div class="FlexEmbed FlexEmbed--4by3" style="width : 100%; height: 427px;">
                    <div id="map_canvas" style="width:100%;height:100%; float: left;"></div>
                </div>
            </div>
        </div><!-- /.box -->
    </div>
</div>
<div class="row">
    <div class="col-lg-12">
        <div class="box dark">
            <header>
                <div class="icons">
                    <i class="fa fa-picture"></i>
                </div>
                <h5>Photos</h5>
                <div class="toolbar">
                    <a href="@ViewBag.ZipURL" class="btn btn-primary">Download as ZIP</a>
                </div>
            </header>

            <div id="div-1" style="" class="body collapse in">
                <style>
                    .bgimage {
                        float: left;
                        width: 150px;
                        height: 170px;
                        margin: 5px;
                        border: 5px solid #ccc;
                    }
                </style>

                @if (ViewBag.PhotoList != null)
                {
                    foreach (var item in ViewBag.PhotoList)
                    {
                        @: <div class="bgimage @item.Tag"><a href="@item.Url" class="zoombox zgallery1"><img src="@item.Url" style="width: 100%; height: 100%;" /><span style="bottom: 20px; position: relative;height: 20px;width: 100%;text-align: center;background: white;display: block;">@item.Tag</span></a></div>
                    }
                }
                <div style="clear: both"></div>
            </div>
        </div>
    </div>
</div>


@section Scripts
{

}

